from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import pyodbc
from dotenv import load_dotenv
import os

# 游릭 Agreg치 esta l칤nea justo despu칠s de los imports:
from app.routes import login
from app.routes import clientes
from app.routes import servicios

load_dotenv()

app = FastAPI()

# Configuraci칩n CORS
# Es importante que el allow_origins incluya la IP de tu PC para acceso desde otros dispositivos
origins = [
    "http://localhost:5173",             # Para cuando lo corres en tu propia PC
    "http://192.168.100.132:5173",       # Para cuando accedes desde otros dispositivos con tu IP actual
    # "http://otrodominio.com",          # Si tu frontend estuviera en otro dominio
    # "https://otrodominio.com",
]

app.add_middleware(
    CORSMiddleware,
    # Se recomienda ser m치s espec칤fico con allow_origins en producci칩n
    # Pero para desarrollo, "*" es com칰n para evitar problemas de CORS.
    allow_origins=["*"], # Permite todas las IPs y dominios para desarrollo
    allow_credentials=True,
    allow_methods=["*"], # Permite todos los m칠todos (GET, POST, PUT, DELETE, etc.)
    allow_headers=["*"], # Permite todos los encabezados
)

# Leer variables del entorno
server = os.getenv("SQL_SERVER")
database = os.getenv("SQL_DB")

# Funci칩n para conexi칩n (aunque ya la tienes en db.py, aqu칤 solo la defines si la usaras directamente en main.py)
# Si no la usas aqu칤, podr칤as considerar eliminarla de main.py para evitar duplicidad,
# ya que db.py es el m칩dulo encargado de la gesti칩n de la conexi칩n.
def get_db_connection():
    conn = pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={server};"
        f"DATABASE={database};"
        "Trusted_Connection=yes;"
    )
    return conn

# Ruta de prueba
@app.get("/")
def root():
    return {"message": "API Lavander칤a funcionando correctamente"}

# 游릭 Incluye los routers en la aplicaci칩n FastAPI
app.include_router(login.router)
app.include_router(clientes.router)
app.include_router(servicios.router)

